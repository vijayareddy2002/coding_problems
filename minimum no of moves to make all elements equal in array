# MAKING MINIMUM NO OF MOVES TO EQUALIZE ALL ELEMENTS IN A ARRAYS
Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

***********In one move, you can increment or decrement an element of the array by 1.**********

Test cases are designed so that the answer will fit in a 32-bit integer.

l=[1,10,2,9]
#can be done using median of a ARRAYS 
t=sorted(l)
print(t)
min1 = (t[(len(t)//2)-1]+t[len(t)//2])//2 if len(t)%2==0 else t[len(t)//2]
print(min1)
sum1=0 
for i in range(len(l)):
    sum1=sum1+(abs(l[i]-min1))
print("minimum num of moves to make all elements in array")
print(sum1)

******second kind in this problem:
Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment n - 1 elements of the array by 1.

 

Example 1:

Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
Example 2:

Input: nums = [1,1,1]
Output: 0


class Solution:
    def minMoves(self, nums: List[int]) -> int:
        return sum(nums)-min(nums)*len(nums)
